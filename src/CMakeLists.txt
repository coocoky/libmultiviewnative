# include directories
# src directory
INCLUDE_DIRECTORIES(.)

SET(Boost_USE_MULTITHREADED      ON)
FIND_PACKAGE (Boost 1.42 QUIET COMPONENTS thread REQUIRED)
IF(Boost_FOUND)
INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIRS})
LINK_DIRECTORIES(${Boost_LIBRARY_DIRS})
ENDIF()

IF(DEFINED ${BOOST_ROOT} AND ${BOOST_ROOT} MATCHES ".*/.*")
  SET(BOOST_LIB_DIR ${BOOST_ROOT}/lib)
ELSE()
  SET(BOOST_LIB_DIR ${Boost_LIBRARY_DIRS})
ENDIF()


# build and link
CUDA_ADD_LIBRARY(${PROJECT_NAME} multiviewnative.cu multiviewnative.cpp image_stack_utils.cpp SHARED)
CUDA_ADD_CUFFT_TO_TARGET(${PROJECT_NAME})
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${PROJECT_SOURCE_DIR}/cmake)

## FINDING FFTW
SET(FFTW_USE_STATIC_LIBS TRUE)
FIND_PACKAGE(FFTW QUIET)
IF(NOT FFTW_FOUND)
 message(">> [src] Static FFTW libs not found, trying dynamic libraries")
 SET(FFTW_USE_STATIC_LIBS FALSE)
 FIND_PACKAGE(FFTW REQUIRED)
ENDIF()

IF(FFTW_FOUND)
  SET(FFTW_LIBS_TO_USE ${FFTW_FOUND_SERIAL_LIBS} m)
  INCLUDE_DIRECTORIES(${FFTW_INCLUDES})
  LINK_DIRECTORIES(${FFTW_ROOT}/lib) 
ENDIF()

find_package(OpenMP)
if (OPENMP_FOUND)
    set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
    set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")

IF("${FFTW_LIBRARIES}" MATCHES ".*fftw3f_omp.*" AND "${FFTW_LIBRARIES}" MATCHES ".*fftw3_omp.*")
  SET(FFTW_LIBS_TO_USE ${FFTW_LIBS_TO_USE} ${FFTW_FOUND_OPENMP_LIBS} m)
endif()
else(OPENMP_FOUND)

  IF("${FFTW_LIBRARIES}" MATCHES ".*fftw3f_threads.*" AND "${FFTW_LIBRARIES}" MATCHES ".*fftw3_threads.*")
    SET(FFTW_LIBS_TO_USE ${FFTW_LIBS_TO_USE} ${FFTW_FOUND_THREADS_LIBS} m)
  endif()
  
endif(OPENMP_FOUND)

## FINDING FFTW END

add_library( ext_boost_thread  SHARED IMPORTED )
set_target_properties( ext_boost_thread PROPERTIES IMPORTED_LOCATION ${BOOST_LIB_DIR}/libboost_thread.so )

target_link_libraries(${PROJECT_NAME} ${FFTW_LIBS_TO_USE} ext_boost_thread)


SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES PUBLIC_HEADER "${PROJECT_SOURCE_DIR}/inc/multiviewnative.h") 
INSTALL(TARGETS ${PROJECT_NAME}
  EXPORT multiviewnative-targets 
  LIBRARY DESTINATION "${INSTALL_LIB_DIR}" COMPONENT shlib
  PUBLIC_HEADER DESTINATION "${INSTALL_INCLUDE_DIR}" COMPONENT inc)




